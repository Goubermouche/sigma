#pragma once
#include "intermediate_representation/node_hierarchy/function.h"
#include "intermediate_representation/codegen/live_interval.h"
#include "intermediate_representation/codegen/instruction.h"
#include "intermediate_representation/codegen/value.h"

#include "intermediate_representation/codegen/work_list.h"
#include "intermediate_representation/codegen/control_flow_graph.h"


namespace ir {
	struct codegen_context {
		auto lookup_value(handle<node> value) -> virtual_value*;
		auto allocate_stack(u64 size, u64 alignment) -> i32;
		auto get_stack_slot(handle<node> target) -> i32;

		void append_instruction(handle<instruction> inst);
		void hint_reg(u64 interval_index, reg reg);

		template<typename extra_type = utility::empty_property>
		auto create_instruction(u64 operand_count) const -> handle<instruction> {
			void* inst_allocation = function->allocator.allocate(sizeof(instruction));
			const handle inst_ptr = static_cast<instruction*>(inst_allocation);

			// assign data
			inst_ptr->operands = utility::slice<i32>(function->allocator, operand_count);
			inst_ptr->set_property(function->allocator.allocate(sizeof(extra_type)));

			return inst_ptr;
		}

		template<typename extra_type = utility::empty_property>
		auto create_value() const -> handle<value> {
			void* value_allocation = function->allocator.allocate(sizeof(value));
			const handle value_ptr = static_cast<value*>(value_allocation);

			value_ptr->set_property(function->allocator.allocate(sizeof(extra_type)));
			return value_ptr;
		}

		handle<function> function;
		handle<work_list> work_list;
		control_flow_graph graph;

		std::vector<u64> basic_block_order;
		std::vector<phi_value> phi_values;

		// live intervals which represent value lifetimes 
		std::vector<live_interval> intervals;
		std::vector<u32> labels; 

		// virtual values which represent physical memory / values which are
		// passed around when the program runs 
		std::unordered_map<u64, virtual_value> values;

		std::unordered_map<handle<node>, i32> stack_slots;

		// schedule generated by the scheduler
		std::unordered_map<handle<node>, handle<basic_block>> schedule;
		std::unordered_map<handle<node>, machine_block> machine_blocks;

		handle<instruction> first;
		handle<instruction> head;

		handle<symbol_patch> first_patch;

		u64 caller_usage = 0;
		u64 stack_usage = 0;
		u64 endpoint = 0;
		u64 prologue_length = 0;
		u64 fallthrough;
	};
}
